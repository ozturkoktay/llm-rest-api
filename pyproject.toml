[project]
name = "llm-api"
version = "0.1.0"
description = "Professional REST API for Local LLM Models"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "fastapi",
    "uvicorn",
    "pydantic",
    "pydantic-settings",
    "httpx",
    "python-multipart",
    "requests",
    "loguru"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "ruff",
]
[tool.ruff]
target-version = "py312"
indent-width = 2
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    "ERA",  # eradicate (commented code)
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PLR",  # pylint refactor
    "PLW",  # pylint warnings
    "PIE",  # flake8-pie
    # "COM",  # flake8-commas - conflicts with formatter
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert detected
    "T201",   # print statements (useful for debugging)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "S608",   # possible SQL injection (false positives)
    "ERA001", # commented out code
    "S311",
    "S603", # subprocess use (false positives)
    "S607",
    "PGH003"
]

[tool.hatch.version]
source = "vcs"


[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing:skip-covered --cov-report=xml:.coverage.xml --cov-report=html:htmlcov --maxfail=1 --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "network: marks tests as requiring network access",
    "docs: marks tests as documentation tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*torch.distributed.*:UserWarning",
    "ignore:.*The 'nopython' keyword.*:DeprecationWarning",
]
